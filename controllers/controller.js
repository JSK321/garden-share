// *********************************************************************************
// controller.js - this file offers a set of routes for displaying and saving data to the db
// *********************************************************************************

// Dependencies
// =============================================================

const axios = require('axios')

// Requiring our models
var db = require("../models");
var nodemailer = require("nodemailer");

// Routes
// =============================================================
module.exports = function (app) {
  // HTML routes =================================
  // Get route
  app.get("/", function (req, res) {
    res.render("index");
  });


  // Owner routes ========================================
  // Get all owners
  app.get("/api/owners", function (req, res) {
    db.Owner.findAll().then(result => {
      res.json(result)
    }).catch(err => {
      res.status(500).send(err);
    })
  })

  // Get owner by id
  app.get("/api/owners/:id", function (req, res) {
    db.Owner.findOne({ where: { id: req.params.id } }).then(result => {
      res.json(result)
    }).catch(err => {
      res.status(500).send(err);
    })
  })

  // Post route to add an Owner
  app.post("/api/owners", function (req, res) {
    const APIKey = '0a157990-f940-11ea-ac04-cb65445966da'
    axios.get(`https://app.geocodeapi.io/api/v1/search?apikey=${APIKey}&text=${req.body.address}`)
      .then(response => {
        db.Owner.create({
          username: req.body.username,
          email: req.body.email,
          address: req.body.address,
          latitude: response.data.bbox[1],
          longitude: response.data.bbox[0],
          password: req.body.password
        }).then(result => {
          res.json(result)
        }).catch(err => {
          res.status(500).send(err)
        })
      })
  })

  // DELETE route 
  app.delete("/api/owners/:id", function (req, res) {
  });

  app.get("/profile", function(req, res) {
    res.render("profile")
  });
  // PUT route
  app.put("/api/owners/:id", function (req, res) { });

  // Gardener routes ==========================================

  // Get all gardeners
  app.get("/api/gardeners", function (req, res) {
    db.Gardener.findAll().then(result => {
      res.json(result)
    }).catch(err => {
      res.status(500).send(err);
    })
  })

  // Get owner by id
  app.get("/api/gardeners/:id", function (req, res) {
    db.Gardener.findOne({ where: { id: req.params.id } }).then(result => {
      res.json(result)
    }).catch(err => {
      res.status(500).send(err);
    })
  })

  // Post route to add a Gardener
  app.post("/api/gardeners", function (req, res) {
    const APIKey = '0a157990-f940-11ea-ac04-cb65445966da'
    axios.get(`https://app.geocodeapi.io/api/v1/search?apikey=${APIKey}&text=${req.body.address}`)
      .then(response => {
        db.Gardener.create({
          username: req.body.username,
          email: req.body.email,
          address: req.body.address,
          latitude: response.data.bbox[1],
          longitude: response.data.bbox[0],
          password: req.body.password
        }).then(result => {
          res.json(result)
        }).catch(err => {
          res.status(500).send(err)
        })
      })
  })

  // DELETE route 
  app.delete("/api/gardeners/:id", function (req, res) {
  });

  // PUT route
  app.put("/api/gardeners/:id", function (req, res) { });

  // Garden routes ==============================================
  // Get all gardens
  app.get("/api/gardens", function (req, res) {
    db.Garden.findAll().then(result => {
      res.json(result)
    }).catch(err => {
      res.status(500).send(err);
    })
  })

  // Get garden by id
  app.get("/api/gardens/:id", function (req, res) {
    db.Garden.findOne({ where: { id: req.params.id } }).then(result => {
      res.json(result)
    }).catch(err => {
      res.status(500).send(err);
    })
  })

  // Post route to add a garden
  app.post("/api/gardens", function (req, res) {
    db.Owner.findOne({ where: { id: req.body.OwnerId } }).then(owner => {
      db.Garden.create({
        name: req.body.name,
        address: owner.address,
        latitude: owner.latitude,
        longitude: owner.longitude,
        description: req.body.description,
        length: req.body.length,
        width: req.body.width,
        OwnerId: owner.id
        // pictureLink: generated by cloudinary
      }).then(result => {
        res.json(result)
      }
      ).catch(err => {
        res.status(500).send(err)
      })
    }).catch(err => {
      res.status(500).send(err)
    })
  })


//DELETE route to delete garden by ID
app.delete("/api/garden/:id", function(req, res){
  db.Garden.destroy({
    where: {
      id: req.params.id
    }
  }).then(data=>{
    if (data === 0) {
      res.status(404).json(data);
    } else {
      res.json(data);
    }
}).catch(err=>{
  console.log(err);
  res.status(500).json(err);
});
});

  // PUT route
  app.put("/api/gardens/:id", function (req, res) { });

  // Compost routes =======================================
  
  // Get all composts
  app.get("/api/composts", function (req, res) {
    db.Compost.findAll().then(result => {
      res.json(result)
    }).catch(err => {
      res.status(500).send(err);
    })
  })

  // Get compost by id
  app.get("/api/composts/:id", function (req, res) {
    db.Garden.findOne({ where: { id: req.params.id } }).then(result => {
      res.json(result)
    }).catch(err => {
      res.status(500).send(err);
    })
  });

  

  // Post route to add a compost
  app.post("/api/composts", function (req, res) {
    db.Owner.findOne({ where: { id: req.body.OwnerId } }).then(owner => {
      db.Compost.create({
        name: req.body.name,
        address: owner.address,
        latitude: owner.latitude,
        longitude: owner.longitude,
        OwnerId: owner.id
        // pictureLink: generated by cloudinary
      }).then(result => {
        res.json(result)
      }
      ).catch(err => {
        res.status(500).send(err)
      })
    }).catch(err => {
      res.status(500).send(err)
    })
  })

//DELETE route to delete compost by ID
app.delete("/api/compost/:id", function(req, res){
  db.Compost.destroy({
    where: {
      id: req.params.id
    }
  }).then(data=>{
    if (data === 0) {
      res.status(404).json(data);
    } else {
      res.json(data);
    }
}).catch(err=>{
  console.log(err);
  res.status(500).json(err);
});
});

  // PUT route
  app.put("/api/composts/:id", function (req, res) { });


  // Email post route ============================
  // POST route to send email
  app.post("/email", function (req, res) {
    db.Owner.findOne({
      where: {
        id: req.body.userId,

      },
    }).then(function (data) {
      //email addresses
      const newEmail = {
        from: "patchedapp@gmail.com", //can we get from DB using ID?
        to: "chrissakwa@gmail.com", //can we get from DB using ID?
        subject: "testing nodemailer",
        text: "this works as is",
      };
      //email sending
      transport.sendMail(newEmail, (err, info) => {
        if (err) {
          console.log(err);
        } else {
          console.log("email sent successfully" + info);
        }
        res.json(data);
        // const userType = req.body.userType,
        // const userId = req.body.userId,
        // const emailBody = req.body.emailBody
      });
    });
  });

}



